#include "json.hpp"
#include <fstream>
#include <iostream>
#include <sys/stat.h>

// for convenience
using json = nlohmann::json;

#include "math.h"
#include <opencv2/core/core.hpp>

struct Polygon {
  std::string name;
  std::vector<cv::Point2f> points;
};

inline bool exists_test(const std::string &name) {
  struct stat buffer;
  return (stat(name.c_str(), &buffer) == 0);
}

int main() {
  std::string json_file_path("index.json"); // read json file generated by vwd

  if (!exists_test(json_file_path)) {
    std::cout << json_file_path << " path not found!" << std::endl;
    return -1;
  }

  std::ifstream in(json_file_path);
  json js;
  in >> js;
  std::cout << "read: " << json_file_path << std::endl;

  auto names = js["objects"];
  std::cout << "names 	" << names << std::endl;

  auto js_polys = js["/frames/0/polygon"_json_pointer];
  std::cout << "js_polys	" << js_polys.size() << std::endl;

  std::vector<Polygon> polygons;
  // check: names.size() == js_polys.size()
  for (int i = 0; i < js_polys.size(); ++i) {
    // check: js_polys[i]["x"].size() == js_polys[i]["y"].size()
    auto n_points = js_polys[i]["x"].size();
    Polygon p;
    p.name = names[i]["name"];

    for (int np = 0; np < n_points; ++np) {
      auto coord_x = js_polys[i]["x"][np];
      auto coord_y = js_polys[i]["y"][np];
      cv::Point2f xy(coord_x, coord_y);
      p.points.push_back(xy);
    }
    polygons.push_back(p);
  }

  for (auto &p : polygons) {
    std::cout << "polygon: " << p.name << " points " << p.points.size() << '\n';
  }

  // // write prettified JSON to another file
  // std::ofstream o("results.json");
  // o << j.dump() << std::endl;
  // std::ofstream pretty("results-pretty.json");
  // pretty << std::setw(4) << j << std::endl;
  // // results

  std::cout << "Exiting." << std::endl;
  return 0;
}
